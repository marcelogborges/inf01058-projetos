// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2023 21:37:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_vlg_sample_tst(
	A,
	B,
	S0,
	sampler_tx
);
input [0:7] A;
input [0:7] B;
input  S0;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or S0)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_vlg_check_tst (
	Z,
	sampler_rx
);
input [0:7] Z;
input sampler_rx;

reg [0:7] Z_expected;

reg [0:7] Z_prev;

reg [0:7] Z_expected_prev;

reg [0:7] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Z_expected_prev = Z_expected;
end


// expected Z[ 7 ]
initial
begin
	Z_expected[7] = 1'bX;
end 
// expected Z[ 6 ]
initial
begin
	Z_expected[6] = 1'bX;
end 
// expected Z[ 5 ]
initial
begin
	Z_expected[5] = 1'bX;
end 
// expected Z[ 4 ]
initial
begin
	Z_expected[4] = 1'bX;
end 
// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
end 
// generate trigger
always @(Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Z = %b | ",Z_expected_prev);
	$display("| real Z = %b | ",Z_prev);
`endif
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:7] A;
reg [0:7] B;
reg S0;
// wires                                               
wire [0:7] Z;

wire sampler;                             

// assign statements (if any)                          
mux i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.S0(S0),
	.Z(Z)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #240000 1'b0;
	A[7] = #720000 1'bX;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
	A[6] = #480000 1'b0;
	A[6] = #480000 1'bX;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
	A[5] = #240000 1'b0;
	A[5] = #720000 1'bX;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
	A[4] = #480000 1'b0;
	A[4] = #480000 1'bX;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #240000 1'b0;
	A[3] = #720000 1'bX;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #240000 1'b0;
	A[2] = #720000 1'bX;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #240000 1'b0;
	A[1] = #720000 1'bX;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #240000 1'b0;
	A[0] = #720000 1'bX;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #480000 1'b1;
	B[7] = #240000 1'b0;
	B[7] = #240000 1'bX;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #480000 1'b1;
	B[6] = #240000 1'b0;
	B[6] = #240000 1'bX;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #720000 1'b1;
	B[5] = #240000 1'bX;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #480000 1'b1;
	B[4] = #480000 1'bX;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #480000 1'b1;
	B[3] = #240000 1'b0;
	B[3] = #240000 1'bX;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #480000 1'b1;
	B[2] = #240000 1'b0;
	B[2] = #240000 1'bX;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #960000 1'bX;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #480000 1'b1;
	B[0] = #240000 1'b0;
	B[0] = #240000 1'bX;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #480000 1'b1;
	S0 = #480000 1'bX;
end 

mux_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.S0(S0),
	.sampler_tx(sampler)
);

mux_vlg_check_tst tb_out(
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

